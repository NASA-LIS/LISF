#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <vicNl.h>

static char vcid[] = "$Id$";
int unpack_state_int(float *states, int *count, int *val)
{
    *val = (int)states[*count];
    *count += 1;
    return(1);
}

int unpack_state_char(float *states, int *count, char *val)
{
    //*val = (char)states[*count];
    if(states[*count]==1.0)
    {
        *val = TRUE;
    }
    else
    {
        *val = FALSE;
    }
    *count += 1;
    return(1);
}

int unpack_state_double(float *states, int *count, double *val)
{
    *val = (double)states[*count];
    *count += 1;
    return(1);
}

void unpack_model_state(dist_prcp_struct    *prcp,
                        global_param_struct *gp,
                        int                  Nveg,
                        int                  Nbands,
                        int                  cellnum,
                        soil_con_struct     *soil_con,
                        int                  Ndist,
                        char                *init_STILL_STORM,
                        int                 *init_DRY_TIME,
                        lake_con_struct      lake_con,
                        float               *states)
{
    extern option_struct options;
    char   tmpstr[MAXSTRING];
    char   ErrStr[MAXSTRING];
    char   tmpchar;
    double tmpval;
    double depth_node[MAX_NODES];
    int    veg, iveg;
    int    band, iband;
    int    lidx;
    int    nidx;
    int    dist;
    int    tmp_cellnum;
    int    tmp_Nveg;
    int    tmp_Nband;
    int    tmp_char;
    int    byte, Nbytes;
    int    tmp_int, node;
    int    count = 0;
#if SPATIAL_FROST
    int    frost_area;
#endif

    cell_data_struct     ***cell;
    snow_data_struct      **snow;
    energy_bal_struct     **energy;
    veg_var_struct       ***veg_var;
    lake_var_struct        *lake_var;

    cell    = prcp->cell;
    veg_var = prcp->veg_var;
    snow    = prcp->snow;
    energy  = prcp->energy;
    lake_var = &prcp->lake_var;

    options.BINARY_STATE_FILE = 1;

    /* read cell information */
    unpack_state_int(states, &count, &tmp_cellnum);
    unpack_state_int(states, &count, &tmp_Nveg);
    unpack_state_int(states, &count, &tmp_Nband);
    /* unpack_state_int(states, &count, &Nbytes); */

    /* Read soil thermal node deltas */
    for ( nidx = 0; nidx < options.Nnode; nidx++ )
    {
        unpack_state_double(states, &count, &soil_con->dz_node[nidx]);
    }
    if ( options.Nnode == 1 ) soil_con->dz_node[0] = 0;

    /* Read soil thermal node depths */
    for ( nidx = 0; nidx < options.Nnode; nidx++ )
    {
        unpack_state_double(states, &count, &soil_con->Zsum_node[nidx]);
    }

    if ( options.Nnode == 1 ) soil_con->Zsum_node[0] = 0;

    if ( soil_con->Zsum_node[options.Nnode-1] - soil_con->dp > SMALL) 
    {
        fprintf( stderr, "WARNING: Sum of soil nodes (%f) exceeds defined damping depth (%f). \
                         Resetting damping depth.\n", soil_con->Zsum_node[options.Nnode-1],
                 soil_con->dp );
        soil_con->dp = soil_con->Zsum_node[options.Nnode-1];
    }

    /* Read dynamic soil properties */
#if EXCESS_ICE
    /* Read soil depth */
    for ( lidx = 0; lidx < options.Nlayer; lidx++ )
    {
        unpack_state_double(states, &count, &soil_con->depth[lidx]);
    }

    /* Read effective porosity */
    for ( lidx = 0; lidx < options.Nlayer; lidx++ )
    {
        unpack_state_double(states, &count, &soil_con->effective_porosity[lidx]);
    }

    /* Reading damping depth */
    unpack_state_double(states, &count, &soil_con->dp);
#endif //EXCESS_ICE

    /* Input for all vegetation types */
    for ( veg = 0; veg <= Nveg; veg++ )
    {
        // read distributed precipitation variables
        unpack_state_double(states, &count, &prcp->mu[veg]);
        unpack_state_char(states, &count, &init_STILL_STORM[veg]);
        unpack_state_int(states, &count, &init_DRY_TIME[veg]);

        /* Input for all snow bands */
        for ( band = 0; band < Nbands; band++ )
        {
            /* Read cell identification information */
            unpack_state_int(states, &count, &iveg);
            unpack_state_int(states, &count, &iband);

            if ( iveg != veg || iband != band ) 
            {
                fprintf(stderr,"The vegetation and snow band indices in the model state file \
                               (veg = %d, band = %d) do not match those currently requested \
                               (veg = %d , band = %d).  Model state file must be stored with \
                               variables for all vegetation indexed by variables for all snow bands.\n",
                        iveg, iband, veg, band);
                nrerror(ErrStr);
            }

            // Read both wet and dry fractions if using distributed precipitation
            for ( dist = 0; dist < Ndist; dist ++ )
            {
                /* Read total soil moisture */
                for ( lidx = 0; lidx < options.Nlayer; lidx++ )
                {
                    unpack_state_double(states, &count, &cell[dist][veg][band].layer[lidx].moist);
                }

                /* Read average ice content */
                for ( lidx = 0; lidx < options.Nlayer; lidx++ )
                {
#if SPATIAL_FROST
                    for ( frost_area = 0; frost_area < FROST_SUBAREAS; frost_area++ )
                    {
                        unpack_state_double(states, &count, &cell[dist][veg][band].layer[lidx].ice[frost_area]);
                    }
#else
                    unpack_state_double(states, &count, &cell[dist][veg][band].layer[lidx].ice);
#endif // SPATIAL_FROST
            }

            /* Read dew storage */
            if ( veg < Nveg )
            {
                unpack_state_double(states, &count, &veg_var[dist][veg][band].Wdew);
            }
        }

        /* Read snow data */
        unpack_state_int(states, &count, &snow[veg][band].last_snow);
        unpack_state_char(states, &count, &snow[veg][band].MELTING);
        unpack_state_double(states, &count, &snow[veg][band].coverage);
        unpack_state_double(states, &count, &snow[veg][band].swq);
        unpack_state_double(states, &count, &snow[veg][band].surf_temp);
        unpack_state_double(states, &count, &snow[veg][band].surf_water);
        unpack_state_double(states, &count, &snow[veg][band].pack_temp);
        unpack_state_double(states, &count, &snow[veg][band].pack_water);
        unpack_state_double(states, &count, &snow[veg][band].density);
        unpack_state_double(states, &count, &snow[veg][band].coldcontent);
        unpack_state_double(states, &count, &snow[veg][band].snow_canopy);

        if(snow[veg][band].density > 0.)
        {
            snow[veg][band].depth = 1000. * snow[veg][band].swq / snow[veg][band].density;
        }

        /* Read soil thermal node temperatures */
        for ( nidx = 0; nidx < options.Nnode; nidx++ )
        {
            unpack_state_double(states, &count, &energy[veg][band].T[nidx]);
        }
    }

    if ( options.LAKES )
    {
        // Read both wet and dry fractions if using distributed precipitation
        for ( dist = 0; dist < Ndist; dist ++ )
        {
            /* Read total soil moisture */
            for ( lidx = 0; lidx < options.Nlayer; lidx++ )
            {
                unpack_state_double(states, &count, &lake_var->soil.layer[lidx].moist);
            }

            /* Read average ice content */
            for ( lidx = 0; lidx < options.Nlayer; lidx++ )
            {
#if SPATIAL_FROST
                for ( frost_area = 0; frost_area < FROST_SUBAREAS; frost_area++ )
                {
                    unpack_state_double(states, &count,
                                        &lake_var->soil.layer[lidx].ice[frost_area]);
                }
#else
                unpack_state_double(states, &count, &lake_var->soil.layer[lidx].ice);
#endif // SPATIAL_FROST
            }

        }

        /* Read snow data */
        unpack_state_int(states, &count, &lake_var->snow.last_snow);
        unpack_state_char(states, &count, &lake_var->snow.MELTING);
        unpack_state_double(states, &count, &lake_var->snow.coverage);
        unpack_state_double(states, &count, &lake_var->snow.swq);
        unpack_state_double(states, &count, &lake_var->snow.surf_temp);
        unpack_state_double(states, &count, &lake_var->snow.surf_water);
        unpack_state_double(states, &count, &lake_var->snow.pack_temp);
        unpack_state_double(states, &count, &lake_var->snow.pack_water);
        unpack_state_double(states, &count, &lake_var->snow.density);
        unpack_state_double(states, &count, &lake_var->snow.coldcontent);
        unpack_state_double(states, &count, &lake_var->snow.snow_canopy);

        if(lake_var->snow.density > 0.)
        {
            lake_var->snow.depth = 1000. * lake_var->snow.swq / lake_var->snow.density;
        }

        /* Read soil thermal node temperatures */
        for ( nidx = 0; nidx < options.Nnode; nidx++ )
        {
            unpack_state_double(states, &count, &lake_var->energy.T[nidx]);
        }

        /* Read lake-specific variables */
        unpack_state_int(states, &count, &lake_var->activenod);
        unpack_state_double(states, &count, &lake_var->dz);
        unpack_state_double(states, &count, &lake_var->surfdz);
        unpack_state_double(states, &count, &lake_var->ldepth);

        for ( node = 0; node <= lake_var->activenod; node++ )
        {
            unpack_state_double(states, &count, &lake_var->surface[node]);
        }

        unpack_state_double(states, &count, &lake_var->sarea);
        unpack_state_double(states, &count, &lake_var->volume);

        for ( node = 0; node < lake_var->activenod; node++ )
        {
            unpack_state_double(states, &count, &lake_var->temp[node]);
        }

        unpack_state_double(states, &count, &lake_var->tempavg);
        unpack_state_double(states, &count, &lake_var->areai);
        unpack_state_double(states, &count, &lake_var->new_ice_area);
        unpack_state_double(states, &count, &lake_var->ice_water_eq);
        unpack_state_double(states, &count, &lake_var->hice);
        unpack_state_double(states, &count, &lake_var->tempi);
        unpack_state_double(states, &count, &lake_var->swe);
        unpack_state_double(states, &count, &lake_var->surf_temp);
        unpack_state_double(states, &count, &lake_var->pack_temp);
        unpack_state_double(states, &count, &lake_var->coldcontent);
        unpack_state_double(states, &count, &lake_var->surf_water);
        unpack_state_double(states, &count, &lake_var->pack_water);
        unpack_state_double(states, &count, &lake_var->SAlbedo);
        unpack_state_double(states, &count, &lake_var->sdepth);
    }
}
