#
# README for Air Force Bratseth scheme tuning software
# Eric Kemp, SSAI and NASA GSFC
# Last modified 7 Jan 2020
#
#------------------------------------------------------------------------------

1. Introduction

LIS 7.4 contains an "AGRMET Ops" runmode for generating atmospheric forcings
on-the-fly as LIS is run.  This capability was developed for and is used by
the United States Air Force in official operations.  "AGRMET Ops" mode includes
a Bratseth objective analysis scheme that blends NWP background data with
observations for precipitation, temperature, wind speed, and relative humidity.
Necessary inputs to the Bratseth scheme include appropriate error covariance
settings for blending the background and observations together.  In prior
LIS versions, these covariances settings were "canned" based on
semivariographic analyses of limited time periods (usually around one month).
However, dynamic updates to the covariances are warranted.

A collection of Python 3 scripts, a Bash script, and Fortran programs have
been developed to automatically perform semivariogram analyses, generated new
best-fit covariance parameters, and then update the relevant lis.config
settings.  The software is included in subdirectories and are described below.

2. Input data

A required input to this software are "OBA files" produced by prior LIS
Bratseth analyses.  These files contain collocated observation, background,
and analysis values (hence "OBA"), along with observation network, platform,
latitude, and longitude data.  These files are generated by LIS if the
following setting exists in the lis.config:

AGRMET output OBA data:  1 # 1 = output OBA files, 0 = do not output

Four sets of OBA files will be generated in different output directories:

precip_OBA/  # Contains 3-hrly precipitation values
rh2m_OBA/    # Contains hourly 2-m relative humidity values
spd10m_OBA/  # Contains hourly 10-m wind speed values
t2m_OBA/     # Contains hourly 2-m temperature values

Sample file names are:

oba_2020030700_12.txt # For precip_OBA
oba_2020030700_01.txt # For all others

And sample contents are:

# Network Platform latitude longitude O   B   A
       WMO  000002942   61.840   22.470  269.950  271.498    0.000
      AMIL       KQEK   35.980  128.420  277.150  276.668    0.000
      AMIL       KQEL   37.870  127.520  272.150  273.983    0.000
      AMIL       KQEN   37.680  128.770  271.150  276.760    0.000
      AMIL       KQEQ   37.880  126.770  273.150  274.314    0.000
      AMIL       KQEW   36.420  128.150  275.150  275.534    0.000
      AMIL       KQEX   36.120  128.370  276.150  276.511    0.000
      AMIL       KQFT   37.600  127.350  274.150  273.761    0.000
      ICAO       KSYM   38.220  -83.580  275.150  276.018    0.000
      ICAO       MMMT   18.100  -94.580  295.150  295.335    0.000
      ICAO       MMZH   17.600 -101.460  302.150  301.084    0.000

3. Batch Script

A Bash batch script "run_autotune_discover.sh" has been developed to automate
underlying steps in the covariance fitting.  This script was designed to run
on the NASA Discover supercomputer using the SLURM batch queueing system.
It is intended to serve as an example for writing similar scripts on other
systems, with porting changes (queuing system, queue names, local enviroment
modules) being limited to the batch script itself.

The batch script is run by:

    sbatch run_autotune_discover.sh $YYYYMMDDHH $DD

where $YYYYMMDDHH is the end date/time of the OBA training period, and
$DD is the length (in days) of the OBA training period.

The script performs several major steps:

(1) Customize config files for procOBA_NWP, a Fortran program that creates
empirical semivariograms for gauge and surface observations against NWP
background.  This step includes construction of a station blacklist file
to screen out locations with: large mean differences between observation
and background values; small sample sizes; and multiple networks for the
same station.  Customization also includes setting the start and end times
of the tuning period and the frequency for reading OBA files.
This step is performed by customize_procoba_nwp.py, and the script is run in
parallel for precipitation, relative humidity, wind speed, and temperature.

(2) In parallel, run procOBA_NWP for precipitation, relative humidity,
wind speed, and temperature.  This Fortran program will read the customized
config files set in (1) above, read the OBA files for the requested time
period, and construct empirical semivariograms. The empirical semivariograms
are output in text files.

(3) In parallel, run fit_semivariogram.py to calculate best-fits to the
empirical semivarograms calculated in (2) above.  This is run for
precipitation, relative humidity, wind speed, and temperature. Best-fit
parameters (observation error variance, background error variance, and
background error correlation length) are output in text files.

(4) Customize config files for procOBA_Sat, a Fortran program for creating
empirical semivariograms from gauges and nearby satellite retrievals.
Customization includes setting the start and end times of the tuning period
and the frequency for reading OBA files.  This step is performed by
customize_procoba_sat.py, and the script is run in parallel for IMERG,
CMORPH, GEOPRECIP, and SSMIS data.

(5) In parallel, run procOBA_Sat for IMERG, CMORPH, GEOPRECIP, and SSMIS data.
This will read in the customized config files set in (4) above, read the
OBA files for the requested time period, match gauges with nearest
satellite estimates within a specified radius, and construct empirical
semivariograms.  The empirical semivariograms are output in text files.

(6) In parallel, run fit_semivariogram.py to calculate best-fits to the
empirical semivariograms calculated in (5) above.  This is run for IMERG,
CMORPH, GEOPRECIP, and SSMIS data.  Best-fit parameters (gage observation
error variance, satellite observation error variance, and satellite
observation error correlation length) are output to text files.

(7) In parallel, run rescale_sat_sigma2.py to rescale the satellite error
variances to be w/r/t NWP background. This is accomplished by multiplying
the satellite error variance from (6) with the gage error variance from (3)
and then dividing by the gage error variance in (6).  This is performed
for IMERG, CMORPH, GEOPRECIP, and SSMIS data. The rescaled satellite error
variances are output to text files.

(8) Reads a lis.config file, and generates a replacement with new Bratseth
error covariance settings. This is performed by customize_lis_config.py.

Note that error checking is performed at each stage.  If an error occurs,
the script is aborted, and no new lis.config file is generated.

3. Config file templates

A number of templates for config files are in the cfgs/ subdirectory.  They
are described below.

(*) autotune.cfg:  A high-level Python config file used by multiple scripts.
Specifies the path for the work directory where programs are run; the path to
the scripts used in the package; the path to the config templates; the path
to compiled Fortran binaries; and the path to lis.config file to be updated.

Also, a list of variable keys is included for use by customize_lis_config.py.
This is used to identify which variables or data sources (gage vs satellite
data) are to be updated.  Possible values are rh2m, spd10m, t2m, gage,
cmorph, geoprecip, imerg, and ssmi.  NOTE:  NO SPACES SHOULD BE USED FOR
THE VALUES LISTED IN THE varlist: ENTRY.

(*) blacklist_gage.cfg: A Python config file used by customize_procoba_nwp.py.
This specifies the maximum number of networks a gage platform (ID) is allowed
to have before being blacklisted; the minimum gage reports required to
escape blacklising; and the maximum absolute mean difference in observations
and background precipitation tolerated without blacklisting.

Also specified is the directory containing the OBA files for precipitation;
the "data_frequency" of the OBA files (i.e., either 6 or 12, indicating
whether 6 hours or 12 hours of precipitation analyses were generated together
by LIS); and the valid hours-of-the-day (in UTC) to use when creating
the blacklist.

(*) blacklist_rh2m.cfg: A Python config file used by customize_procoba_nwp.py.
Similar to blacklist_gage.cfg, but intended for 2-m relative humidity. The
"data_frequency" of the OBA files should be 1.

(*) blacklist_spd10m.cfg: A Python config file used by
customize_procoba_nwp.py.  Similar to blacklist_rh2m.cfg, but intended for
10-m wind speed.  The "data_frequency" of the OBA files should be 1.

(*) blacklist_t2m.cfg: A Python config file used by customize_procoba_nwp.py.
Similar to blacklist_rh2m.cfg, but intended for 10-m wind speed.  The
"data_frequency" of the OBA files should be 1.

(*) gage_cmorph.cfg: A Python config file used by fit_semivariogram.py, and by
the utility plot_semivariogram.py.  Intended for fitting or plotting
semivariogram between gages and nearby CMORPH estimates.  Specifies name
of text file with empirical semivariogram values; the maximum length (distance)
of the fitted semivariogram, and the function type of the fitted semivariogram
(currently Gaussian).

Additional settings used by plot_semivariogram.py are: A title label, x-axis
label, y-axis label, and labels for observations (here gage) and background
(here CMORPH).

(*) gage_geoprecip.cfg: A Python config file used by fit_semivariogram.py, and
by the utility plot_semivariogram.py.  Similar to gage_cmorph.cfg, but for
semivariograms from gauges and GEOPRECIP estimates.

(*) gage_imerg.cfg: A Python config file used by fit_semivariogram.py, and
by the utility plot_semivariogram.py.  Similar to gage_cmorph.cfg, but for
semivariograms from gauges and IMERG estimates.

(*) gage_nwp.cfg: A Python config file used by fit_semivariogram.py, and
by the utility plot_semivariogram.py.  Similar to gage_cmorph.cfg, but for
semivariograms from gauges and NWP background.

(*) gage_ssmi.cfg: A Python config file used by fit_semivariogram.py, and
by the utility plot_semivariogram.py.  Similar to gage_cmorph.cfg, but for
semivariograms from gauges and SSMI background.

(*) procOBA_NWP.gage.config: An ESMF input file used by procOBA_NWP. Sets
maximum number of gage stations to use; the maximum number of semivariogram
bins; the width (distance) of each semivariogram bin; the directory containing
the OBA files for precipitation; the observation type (here "gage"); whether
to apply a gage blacklist before creating the semivariogram; and the name
of the blacklist file.

Also specifies the start/end year, month, day, and hour of OBA training period,
as well as the interval between OBA files in years, months, days, and hours.
These settings will be updated by customize_procoba_nwp.py.

Also specifies the name of the output file containing the empirical
semivariogram data.

(*) procOBA_NWP.rh2m.config: An ESMF input file used by procOBA_NWP.  Similar
to procOBA_NWP.gage.config but for 2-meter relative humidity. The observation
type is "RH2M".

(*) procOBA_NWP.spd10m.config: An ESMF input file used by procOBA_NWP. Similar
to procOBA_NWP.gage.config but for 10-meter wind speed. The observation
type is "SPD10M".

(*) procOBA_NWP.t2m.config: An ESMF input file used by procOBA_NWP.  Similar
to procOBA_NWP.gage.config but for 2-meter temperature. The observation
type is "T2M".

(*) procOBA_Sat.cmorph.config: An ESMF input file used by procOBA_Sat. Similar
to procOBA_NWP.gage.config but for semivariogram between gauges and CMORPH
estimates. The observation type is "CMORPH".

Additional settings are used by procOBA_Sat to construct a lat/lon grid to
locate gages.  The settings are the maximum number of latitude and longitude
boxes; and the length and width of each lat/lon box (in degrees).  Also,
a maximum distance threshold (in meters) is specified to match each gage
report with the nearest satellite estimate.

In addition, the maximum number of satellite estimates must be provided
for array allocations.

(*) procOBA_Sat.geoprecip.config: An ESMF input file used by procOBA_Sat.
Similar to procOBA_Sat.cmorph.config but used for GEOPRECIP satellite
estimates.

(*) procOBA_Sat.imerg.config: An ESMF input file used by procOBA_Sat.
Similar to procOBA_Sat.cmorph.config but used for IMERG satellite
estimates.

(*) procOBA_Sat.ssmi.config: An ESMF input file used by procOBA_Sat.
Similar to procOBA_Sat.cmorph.config but used for SSMI satellite
estimates.

(*) rh2m.cfg: A Python config file used by fit_semivariogram.py, and by
the utility plot_semivariogram.py.  Similar to gage_cmorph.cfg, but for
semivariograms for 2-meter relative humidity between surface observations
and NWP background.

(*) spd10m.cfg:  A Python config file used by fit_semivariogram.py, and by
the utility plot_semivariogram.py.  Similar to gage_cmorph.cfg, but for
semivariograms for 10-m wind speed between surface observations and NWP
background.

(*) t2m.cfg: A Python config file used by fit_semivariogram.py, and by
the utility plot_semivariogram.py.  Similar to gage_cmorph.cfg, but for
semivariograms for 2-m temperature between surface observations and NWP
background.

4. Scripts

A number of scripts are in the scripts/ subdirectory. They are described
below.

4.1 Top script

(*) run_autotune_discover.sh: Described in Section 3 above.

4.2  Lower-level scripts

(*) customize_lis_config.py: A Python script responsible for reading a
lis.config template, and creating a new lis.config file with updated
Bratseth error covariance settings. Reads the autotune.cfg file and
files with error covariance values in the work directory.

(*) customize_procoba_nwp.py: A Python script responsible for customizing
the ESMF input files for ProcOBA_NWP, as well as constructing station
blacklists.  Uses the autotune.cfg file.

(*) customize_procoba_sat.py: A Python script responsible for customizing
the ESMF input files for ProcOBA_Sat.  Uses the autotune.cfg file.

(*) fit_semivariogram.py: A Python script responsible for creating best-fits
to empirical semivariograms. Depending on the data to be processed, will
use either gage_cmorph.cfg, gage_geoprecip.cfg, gage_imerg.cfg, gage_nwp.cfg,
gage_ssmi.cfg, rh2m.cfg, spd10m.cfg, or t2m.cfg.  Output parameters will
be written to a file specified on the command line.

(*) plot_semivariogram.py: A Python script responsible for plotting the
a best-fit semivariogram developed by fit_semivariogram.py.  THIS IS A
UTILITY FOR USE IN HUMAN REVIEW, AND NOT FOR PRODUCTION USE.

(*) rescale_sat_sigma2.py: A Python script for rescaling the satellite
error variances derived by comparision with gages so they can be used with
NWP background data.  Uses the parameter files generated by
fit_semivariogram.py.

4.3 Python library files

The following Python module files are used by the Python scripts described in
Section 4.2 above.  THESE FILES ARE NOT CALLED FROM THE COMMAND LINE.

(*) autotune.py
(*) create_blacklist.py
(*) semivar.py

5. Fortran programs

Two Fortran programs are used to construct empirical semivariograms.  The
source code and Makefile are in the src/ subdirectory.  They are described
below.

5.1 Driver programs

(*) procOBA_NWP.F90: Fortran program to construct semivariograms from surface
observations and NWP background.  Used for precipitation, 2-m relative
humidity, 10-m wind speed, and 2-m temperature.  The program reads in a
customized procOBA_NWP.$varname.config file, where $varname is gage, rh2m,
spd10m, or t2m.

(*) procOBA_Sat.F90: Fortran program to construct semivariograms from gages
and satellite precipitation estimates. Used for CMORPH, GEOPRECIP, IMERG,
and SSMI.  The program reads in a customized procOBA_Sat.$varname.config
file, where $varname is cmorph, geoprecip, imerg, or ssmi.

5.2 Module files

The following files are additional modules used by the programs listed in
Section 5.1 above.

(*) USAF_GridHashMod.F90
(*) USAF_ReportsMod.F90
(*) USAF_sharedMod.F90
(*) USAF_StationsMod.F90

5.3 Future files

In the future, a QC test will be added to procOBA_Sat to screen out
gages with unacceptably large mean gage-satellite differences. Early
development code is currently in the src/future/ subdirectory, but the
code is not ready for use at this time.

5.4 Building the Fortran executables

Before compiling, the user should run the 'configure' script in the lis/
parent directory.  Once this is run and a make/configure.lis file is created,
the user should run the 'compile' script in the same directory and include the
'-u' flag (indicating compilation of utilities).


